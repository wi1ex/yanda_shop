import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ADMIN_ID = int(os.getenv('ADMIN_ID'))
# BACKEND_URL = os.getenv("BACKEND_URL")


@dp.message(Command("start"))
async def cmd_upload(message: types.Message):
    await message.reply('''
    üõç YANDA Shop ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±—Ä–µ–Ω–¥–∞–º!
    –í—ã–∫—É–ø–∞–µ–º –ª—é–±—É—é –≤–µ—â—å –¥–ª—è –≤–∞—Å –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞! 
    
    ‚úîÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    ‚úâÔ∏è –†–∞–±–æ—Ç–∞–µ–º –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É''')


# @dp.message(Command("upload"))
# async def cmd_upload(message: types.Message):
#     if message.from_user.id == ADMIN_ID:
#         await message.reply("üì§ –ü—Ä–∏—à–ª–∏—Ç–µ *CSV* –∏–ª–∏ *ZIP* —Ñ–∞–π–ª\n"
#                             "- `shoes.csv` ‚Üí –æ–±–Ω–æ–≤–∏—Ç —Ç–∞–±–ª–∏—Ü—É –æ–±—É–≤–∏\n"
#                             "- `clothing.csv` ‚Üí –æ–±–Ω–æ–≤–∏—Ç —Ç–∞–±–ª–∏—Ü—É –æ–¥–µ–∂–¥—ã\n"
#                             "- `accessories.csv` ‚Üí –æ–±–Ω–æ–≤–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤\n"
#                             "- `images.zip` ‚Üí –æ–±–Ω–æ–≤–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", parse_mode=ParseMode.MARKDOWN)
#
#
# @dp.message(F.document)
# async def handle_all(message: types.Message):
#     if message.from_user.id != ADMIN_ID:
#         return
#
#     fname = message.document.file_name.lower()
#     ext = fname.rsplit(".", 1)[-1]
#
#     # —Å–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
#     f = await bot.get_file(message.document.file_id)
#     buf = await bot.download_file(f.file_path)
#     data = buf.read()
#
#     # —Å–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º—É
#     form = aiohttp.FormData()
#     form.add_field("file", data, filename=message.document.file_name, content_type="application/octet-stream")
#
#     # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ —à–ª—ë–º
#     if ext == "csv":
#         url = f"{BACKEND_URL}/api/import_products"
#     elif ext == "zip":
#         url = f"{BACKEND_URL}/api/upload_images"
#     else:
#         return await message.reply("‚ùó –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ ZIP.")
#
#     # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
#     try:
#         async with aiohttp.ClientSession() as sess:
#             async with sess.post(url, data=form) as resp:
#                 try:
#                     data = await resp.json()
#                 except Exception:
#                     data = None
#
#                 if resp.status == 201 and isinstance(data, dict):
#                     # –æ—Ç—á—ë—Ç CSV-–∏–º–ø–æ—Ä—Ç–∞
#                     if "added" in data and "updated" in data:
#                         await message.reply(f"‚úÖ –¢–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:\n"
#                                             f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {data['added']}\n"
#                                             f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['updated']}")
#                     # –æ—Ç—á—ë—Ç ZIP-–∏–º–ø–æ—Ä—Ç–∞
#                     elif {"added", "replaced", "deleted"} <= data.keys():
#                         await message.reply(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:\n"
#                                             f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {data['added']}\n"
#                                             f"–ó–∞–º–µ–Ω–µ–Ω–æ: {data['replaced']}\n"
#                                             f"–£–¥–∞–ª–µ–Ω–æ: {data['deleted']}")
#                     else:
#                         await message.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
#                 else:
#                     text = data or await resp.text()
#                     logger.error(f"Backend {resp.status}: {text}")
#                     await message.reply(f"‚ùå –û—à–∏–±–∫–∞ {resp.status}: {str(text)[:200]}")
#     except Exception as e:
#         logger.exception(e)
#         await message.reply(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    # await bot.send_message(ADMIN_ID, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
