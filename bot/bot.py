import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv('ADMIN_ID'))
BACKEND_URL = os.getenv("BACKEND_URL")

@dp.message(Command("upload"))
async def cmd_upload(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.reply("üì§ –ü—Ä–∏—à–ª–∏—Ç–µ *CSV* –∏–ª–∏ *ZIP* –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏.\n"
                            "- `shoes.csv` ‚Üí –æ–±–Ω–æ–≤–∏—Ç —Ç–∞–±–ª–∏—Ü—É –æ–±—É–≤–∏\n"
                            "- `clothing.csv` ‚Üí –æ–±–Ω–æ–≤–∏—Ç –æ–¥–µ–∂–¥—É\n"
                            "- `accessories.csv` ‚Üí –æ–±–Ω–æ–≤–∏—Ç –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\n"
                            "- ZIP ‚Üí –∑–∞–≥—Ä—É–∑–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ MinIO", parse_mode=ParseMode.MARKDOWN)


@dp.message(F.document)
async def handle_all(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    fname = message.document.file_name.lower()
    ext = fname.rsplit(".", 1)[-1]

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    f = await bot.get_file(message.document.file_id)
    buf = await bot.download_file(f.file_path)
    data = buf.read()

    # —Å–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º—É
    form = aiohttp.FormData()
    form.add_field("file", data, filename=message.document.file_name, content_type="application/octet-stream")

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ —à–ª—ë–º
    if ext == "csv":
        url = f"{BACKEND_URL}/api/import_products"
    elif ext == "zip":
        url = f"{BACKEND_URL}/api/upload_images"
    else:
        return await message.reply("‚ùó –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ ZIP.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    try:
        async with aiohttp.ClientSession() as sess:
            async with sess.post(url, data=form) as resp:
                text = await resp.text()
                if resp.status == 201:
                    await message.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                else:
                    logger.error(f"Backend {resp.status}: {text}")
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞ {resp.status}: {text[:200]}")
    except Exception as e:
        logger.exception(e)
        await message.reply(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.send_message(ADMIN_ID, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
