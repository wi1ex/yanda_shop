import os
import re
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv('ADMIN_ID'))


# --- –ö–æ–º–∞–Ω–¥–∞ /upload ---
@dp.message(Command("upload"))
async def cmd_upload(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await message.reply("üì§ –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ CSV-—Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É —Ç–∏–ø:\n"
                            "`shoe`, `clothing` –∏–ª–∏ `accessory`\n\n–ü—Ä–∏–º–µ—Ä: `accessory`",
                            parse_mode=ParseMode.MARKDOWN)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
@dp.message(F.document)
async def handle_csv(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /upload
        if not message.reply_to_message or not message.reply_to_message.text:
            return await message.reply("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload!")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É (message.caption)
        user_input = (message.caption or "").strip().lower()

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Ç–∏–ø–∞–º–∏
        match = re.search(r'\b(shoe|clothing|accessory)\b', user_input)
        if not match:
            return await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —Ç–∏–ø. –í –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ –∏–∑: \n"
                                       "`shoe`, `clothing` –∏–ª–∏ `accessory`\n\n–í—ã —É–∫–∞–∑–∞–ª–∏: {user_input or '–ø—É—Å—Ç–æ'}",
                                       parse_mode=ParseMode.MARKDOWN)
        actual_type = match.group(1)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        buf = await bot.download_file(file.file_path)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        data = aiohttp.FormData()
        data.add_field("type", actual_type)
        data.add_field("file", buf, filename=message.document.file_name or "products.csv", content_type="text/csv")

        # –ê–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞
        url = f'{os.getenv("BACKEND_URL")}/api/import_products'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as resp:
                    if resp.status == 201:
                        await message.reply("‚úÖ –ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        text = await resp.text()
                        logger.error(f"Backend error {resp.status}: {text}")
                        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ {resp.status}: {text[:300]}")
        except Exception as e:
            logger.exception("Connection error")
            await message.reply(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.send_message(ADMIN_ID, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
