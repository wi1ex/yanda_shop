import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp  = Dispatcher()

# --- –ö–æ–º–∞–Ω–¥–∞ /upload ---
@dp.message(Command("upload"))
async def cmd_upload(message: types.Message):
    await message.reply("üì§ –û—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–∏—Ç–µ CSV-—Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤ —Ç–µ–∫—Å—Ç–µ —Ç–∏–ø:\n"
                        "`shoe`, `clothing` –∏–ª–∏ `accessory`", parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
@dp.message(content_types=types.ContentType.DOCUMENT)
async def handle_csv(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ reply –Ω–∞ /upload
    reply = message.reply_to_message
    if not reply or not reply.text:
        return await message.reply("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—ë CSV.")

    typ = reply.text.strip().lower()
    if typ not in ("shoe", "clothing", "accessory"):
        return await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: shoe, clothing –∏–ª–∏ accessory.")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ –≥–æ—Ç–æ–≤–∏–º —Ñ–æ—Ä–º—É
    file = await bot.get_file(message.document.file_id)
    buf  = await bot.download_file(file.file_path)

    data = aiohttp.FormData()
    data.add_field("type", typ)
    data.add_field("file", buf, filename=message.document.file_name, content_type="text/csv")

    # –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ BACKEND_URL)
    backend = os.getenv("BACKEND_URL", "https://shop.yanda.twc1.net")
    url = f"{backend}/api/import_products"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥
    async with aiohttp.ClientSession() as session:
        async with session.post(url, data=data) as resp:
            if resp.status == 201:
                await message.reply("‚úÖ –ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            else:
                text = await resp.text()
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ {resp.status}: {text}")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.send_message(os.getenv('ADMIN_ID'), "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
