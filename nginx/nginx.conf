events {
    worker_connections 1024;
}

http {
    recursive_error_pages on;

    include       mime.types;
    default_type  application/octet-stream;

    access_log    off;
    error_log     /var/log/nginx/error.log  error;

    # Редирект HTTP → HTTPS
    server {
        listen       80;
        server_name  yandashop.ru;
        return       301 https://$host$request_uri;
    }

    # HTTPS-сервер с поддержкой HTTP/2
    server {
        listen 443 ssl http2;
        server_name  yandashop.ru;

        client_max_body_size 100M;

        ssl_certificate     /etc/letsencrypt/live/yandashop.ru/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/yandashop.ru/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # Блокируем доступ к /webmail/data
        location ~ ^/webmail/data/ {
            return 404;
        }

        # Web-mail
        location ^~ /webmail/ {
            proxy_pass       http://webmail:80/;
            proxy_http_version 1.1;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        # —————————— Проксирование API → Flask-бэкенд ——————————
        location /api/ {
            proxy_pass         http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   Connection      "";
        }

        # —————————— Проксирование /images/ → MinIO/S3 ——————————
        location /images/ {
            proxy_pass         http://minio:9000/images/;
            proxy_http_version 1.1;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # —————————— Всё остальное (SPA) → Frontend ——————————
        #
        # Любой URL, кроме /api/ и /images/, отправляем на ваш
        # frontend-контейнер (порт 80). Если frontend отдаёт 404,
        # перехватываем и возвращаем index.html (SPA fallback).
        #
        location / {
            proxy_pass         http://frontend:80;
            proxy_http_version 1.1;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   Connection      "";

            # Очищаем заголовки If-Modified, чтобы фронтенд НЕ отвечал 304
            proxy_set_header   If-Modified-Since "";
            proxy_set_header   If-None-Match       "";

            proxy_intercept_errors on;
            error_page 404 =200 /index.html;
        }

        # —————————— Обработка «/index.html» после internal-redirect ——————————
        #
        # Когда выше срабатывает error_page 404 =200 /index.html,
        # nginx делает внутренний запрос “/index.html” сюда и отдаёт
        # именно файл index.html из frontend.
        #
        location = /index.html {
            proxy_pass         http://frontend:80/index.html;
            proxy_http_version 1.1;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   Connection      "";

            # И здесь тоже сбрасываем условные GET-заголовки
            proxy_set_header   If-Modified-Since "";
            proxy_set_header   If-None-Match       "";
        }
    }
}
