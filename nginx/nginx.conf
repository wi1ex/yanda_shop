events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # 1) Редирект всего HTTP-трафика на HTTPS
    server {
        listen       80;
        server_name  shop.yanda.twc1.net;
        return       301 https://$host$request_uri;
    }

    # 2) Основной HTTPS-сервер
    server {
        listen       443 ssl http2;
        server_name  shop.yanda.twc1.net;

        ssl_certificate     /etc/letsencrypt/live/shop.yanda.twc1.net/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/shop.yanda.twc1.net/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # —————————— Проксирование API → Flask-бэкенд ——————————
        location /api/ {
            proxy_pass         http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   Connection      "";
        }

        # —————————— Проксирование /images/ → MinIO/S3 ——————————
        location /images/ {
            proxy_pass         http://minio:9000/product-images/;
            proxy_http_version 1.1;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # —————————— Всё остальное (SPA) → Frontend ——————————
        #
        # Любой URL, кроме /api/ и /images/, отправляем на ваш
        # frontend-контейнер (порт 80). Если frontend отдаёт 404,
        # перехватываем и возвращаем index.html (SPA fallback).
        #
        location / {
            proxy_pass         http://frontend:80;
            proxy_http_version 1.1;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;

            # Перехватываем 404 от frontend
            proxy_intercept_errors on;
            # Если frontend вернул 404, вместо него делаем internal GET на /index.html
            error_page 404 =200 /index.html;
        }

        # —————————— Обработка «/index.html» после internal-redirect ——————————
        #
        # Когда выше срабатывает error_page 404 =200 /index.html,
        # nginx делает внутренний запрос “/index.html” сюда и отдаёт
        # именно файл index.html из frontend.
        #
        location = /index.html {
            proxy_pass         http://frontend:80/index.html;
            proxy_http_version 1.1;
            proxy_set_header   Host            $host;
            proxy_set_header   X-Real-IP       $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
