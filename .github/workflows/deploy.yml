name: Deploy on push to main

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL:         ${{ secrets.BACKEND_URL }}
      BOT_TOKEN:           ${{ secrets.BOT_TOKEN }}
      SECRET_KEY:          ${{ secrets.SECRET_KEY }}
      JWT_SECRET_KEY:      ${{ secrets.JWT_SECRET_KEY }}

      DB_HOST:             ${{ secrets.DB_HOST }}
      DB_PORT:             ${{ secrets.DB_PORT }}
      DB_NAME:             ${{ secrets.DB_NAME }}
      DB_USER:             ${{ secrets.DB_USER }}
      DB_PASSWORD:         ${{ secrets.DB_PASSWORD }}

      REDIS_HOST:          ${{ secrets.REDIS_HOST }}
      REDIS_PORT:          ${{ secrets.REDIS_PORT }}
      REDIS_PASSWORD:      ${{ secrets.REDIS_PASSWORD }}

      MINIO_HOST:          ${{ secrets.MINIO_HOST }}
      MINIO_BUCKET:        ${{ secrets.MINIO_BUCKET }}
      MINIO_ROOT_USER:     ${{ secrets.MINIO_ROOT_USER }}
      MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}

      MAIL_PORT:           ${{ secrets.MAIL_PORT }}
      MAIL_SERVER:         ${{ secrets.MAIL_SERVER }}
      MAIL_USERNAME:       ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD:       ${{ secrets.MAIL_PASSWORD }}
      MAIL_USE_TLS:        ${{ secrets.MAIL_USE_TLS }}
      MAIL_DEFAULT_SENDER: ${{ secrets.MAIL_DEFAULT_SENDER }}

      OVERRIDE_HOSTNAME:   ${{ secrets.OVERRIDE_HOSTNAME }}
      DKIM_SELECTOR:       ${{ secrets.DKIM_SELECTOR }}
      POSTMASTER_ADDRESS:  ${{ secrets.POSTMASTER_ADDRESS }}
      ENABLE_SPAMASSASSIN: ${{ secrets.ENABLE_SPAMASSASSIN }}
      ENABLE_CLAMAV:       ${{ secrets.ENABLE_CLAMAV }}
      ENABLE_AMAVIS:       ${{ secrets.ENABLE_AMAVIS }}
      ENABLE_POSTGREY:     ${{ secrets.ENABLE_POSTGREY }}
      ONE_DIR:             ${{ secrets.ONE_DIR }}
      DMS_DEBUG:           ${{ secrets.DMS_DEBUG }}
      LOG_LEVEL:           ${{ secrets.LOG_LEVEL }}

      SSL_TYPE:            ${{ secrets.SSL_TYPE }}
      SSL_CERT_PATH:       ${{ secrets.SSL_CERT_PATH }}
      SSL_KEY_PATH:        ${{ secrets.SSL_KEY_PATH }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1) Определяем, что изменилось
      - name: Detect changed paths between pushes
        id: changes
        run: |
          git fetch --no-tags --prune origin main
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files:"
          echo "$CHANGED"

          FRONT=false
          if echo "$CHANGED" | grep -qE '^frontend/'; then
            FRONT=true
          fi
          echo "frontend=$FRONT" >> $GITHUB_OUTPUT

          BACK=false
          if echo "$CHANGED" | grep -qE '^backend/'; then
            BACK=true
          fi
          echo "backend=$BACK" >> $GITHUB_OUTPUT

          OTHER=false
          while IFS= read -r file; do
            if [[ ! "$file" =~ ^frontend/ ]] && [[ ! "$file" =~ ^backend/ ]]; then
              OTHER=true
              break
            fi
          done <<< "$CHANGED"
          echo "others=$OTHER" >> $GITHUB_OUTPUT

      # 2) SSH-ключ и known_hosts
      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
        shell: bash

      # 3) Собираем .env и копируем на сервер
      - name: Create .env from Secrets
        run: |
          cat > .env <<EOF
          BACKEND_URL=${BACKEND_URL}
          BOT_TOKEN=${BOT_TOKEN}
          SECRET_KEY=${SECRET_KEY}
          JWT_SECRET_KEY=${JWT_SECRET_KEY}
          
          DB_HOST=${DB_HOST}
          DB_PORT=${DB_PORT}
          DB_NAME=${DB_NAME}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          
          REDIS_HOST=${REDIS_HOST}
          REDIS_PORT=${REDIS_PORT}
          REDIS_PASSWORD=${REDIS_PASSWORD}
          
          MINIO_HOST=${MINIO_HOST}
          MINIO_BUCKET=${MINIO_BUCKET}
          MINIO_ROOT_USER=${MINIO_ROOT_USER}
          MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
          
          MAIL_PORT=${MAIL_PORT}
          MAIL_SERVER=${MAIL_SERVER}
          MAIL_USERNAME=${MAIL_USERNAME}
          MAIL_PASSWORD=${MAIL_PASSWORD}
          MAIL_USE_TLS=${MAIL_USE_TLS}
          MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
          
          OVERRIDE_HOSTNAME=${OVERRIDE_HOSTNAME}
          DKIM_SELECTOR=${DKIM_SELECTOR}
          POSTMASTER_ADDRESS=${POSTMASTER_ADDRESS}
          ENABLE_SPAMASSASSIN=${ENABLE_SPAMASSASSIN}
          ENABLE_CLAMAV=${ENABLE_CLAMAV}
          ENABLE_AMAVIS=${ENABLE_AMAVIS}
          ENABLE_POSTGREY=${ENABLE_POSTGREY}
          ONE_DIR=${ONE_DIR}
          DMS_DEBUG=${DMS_DEBUG}
          LOG_LEVEL=${LOG_LEVEL}
          
          SSL_TYPE=${SSL_TYPE}
          SSL_CERT_PATH=${SSL_CERT_PATH}
          SSL_KEY_PATH=${SSL_KEY_PATH}
          EOF
        shell: bash

      - name: Copy .env to server
        run: |
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=yes \
            ./.env \
            "${{ secrets.SERVER_USER }}"@"${{ secrets.SERVER_HOST }}":/root/app/yanda_shop/.env
        shell: bash

      # 4) Деплой по SSH
      - name: Deploy via SSH
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=yes \
              -l "${{ secrets.SERVER_USER }}" "${{ secrets.SERVER_HOST }}" << 'EOF'
            set -euo pipefail
            cd /root/app/yanda_shop
            git fetch --all
            git reset --hard origin/main
  
            if [ "${{ steps.changes.outputs.others }}" = "true" ]; then
              echo "🔄 Root-level changes → full rebuild of all services"
              docker-compose down
              docker network prune --filter "until=24h" --force
              docker container prune --filter "until=24h" --force
              docker image prune --all --filter "until=24h" --force
              docker builder prune --all --filter "until=24h" --force
              certbot renew --noninteractive --standalone --agree-tos
              docker-compose build --no-cache
              docker-compose up -d
              docker-compose run --rm backend flask db upgrade
            fi
  
            if [ "${{ steps.changes.outputs.others }}" = "false" ] && [ "${{ steps.changes.outputs.backend }}" = "true" ]; then
              echo "⚙️  Rebuilding backend..."
              docker-compose build backend
              docker-compose up -d --force-recreate backend
            fi
          
            if [ "${{ steps.changes.outputs.others }}" = "false" ] && [ "${{ steps.changes.outputs.frontend }}" = "true" ]; then
              echo "⚙️  Rebuilding frontend..."
              docker-compose build frontend
              docker-compose up -d --force-recreate frontend
            fi
  
            # Показываем статус
            docker-compose ps
            EOF
        shell: bash
