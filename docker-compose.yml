version: "3.8"
services:
  db:
    image: postgres:17
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always

  redis:
    image: redis:7
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    env_file: .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: always

  minio:
    image: minio/minio:latest
    command: server /data
    env_file: .env
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    ports:
      - "9000:9000"
    volumes:
      - minio_data:/data
    networks:
      - app-network
    restart: always

  backend:
    build: ./backend
    env_file: .env
    volumes:
      - ./backend:/backend
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      - db
    restart: always

  bot:
    build: ./bot
    env_file: .env
    networks:
      - app-network
    depends_on:
      - backend
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
#    ports:
#      - "8080:80"
    networks:
      - app-network
    depends_on:
      - backend
    restart: always

  proxy:
    build: ./nginx
    env_file: .env
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      - backend
      - frontend
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  redis_data:
  minio_data:
